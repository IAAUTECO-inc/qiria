syntax = "proto3";

package qiria;

option go_package = "qiria/core/api/gen";

// ğŸ‡¬ğŸ‡§ The core service definition for Qiria.
// ğŸ‡«ğŸ‡· La dÃ©finition du service principal de Qiria.
service QiriaCore {
  // ğŸ‡¬ğŸ‡§ Requests a report to be generated. This is an asynchronous operation.
  // ğŸ‡«ğŸ‡· Demande la gÃ©nÃ©ration d'un rapport. C'est une opÃ©ration asynchrone.
  rpc RequestReport (ReportRequest) returns (ReportResponse);

  // ğŸ‡¬ğŸ‡§ Retrieves the status and result of a previously requested report.
  // ğŸ‡«ğŸ‡· RÃ©cupÃ¨re le statut et le rÃ©sultat d'un rapport prÃ©cÃ©demment demandÃ©.
  rpc GetReportResult (ReportResultRequest) returns (ReportResultResponse);
}

// ğŸ‡¬ğŸ‡§ The request message for creating a report.
// ğŸ‡«ğŸ‡· Le message de requÃªte pour la crÃ©ation d'un rapport.
message ReportRequest {
  string report_id = 1;
  string parameters_json = 2; // Parameters for the report in JSON format.
}

// ğŸ‡¬ğŸ‡§ The response message containing the task ID for the report generation.
// ğŸ‡«ğŸ‡· Le message de rÃ©ponse contenant l'ID de la tÃ¢che pour la gÃ©nÃ©ration du rapport.
message ReportResponse {
  string task_id = 1;
  string status = 2; // e.g., "QUEUED", "INVALID_REQUEST"
}

message ReportResultRequest {
  string task_id = 1;
}

message ReportResultResponse {
  string task_id = 1;
  string status = 2; // e.g., "PENDING", "RUNNING", "COMPLETED", "FAILED"
  string result_json = 3; // The actual report data, in JSON format.
}